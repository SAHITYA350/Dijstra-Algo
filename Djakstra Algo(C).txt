// connected graph ,using Dijkstra algorithm
// EX : Write a program to find the shortest path to other vertices from a given vertex in a weighted 


#include <stdio.h>
#include <limits.h>  //This is represents maximum positive integer vallues (infinity)
#define V 9  // Number of vertices in the graph

// Function to find the vertex with the minimum distance value
int minDistance(int dist[], int sptSet[]) {
    int min = INT_MAX, min_index;
    for (int v = 0; v < V; v++) {
        if (!sptSet[v] && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }
    return min_index;
}

// Dijkstra's algorithm to find the shortest path from the source vertex
void Dijkstra(int graph[V][V], int src) {
    int dist[V];    // Shortest distance array
    int sptSet[V];  // Tracks processed vertices

    // Initialize distances as infinite and sptSet as false
    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        sptSet[i] = 0;
    }

    dist[src] = 0;  // Distance from source to itself is zero

    // Loop to find the shortest path for all vertices
    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, sptSet);  // Select the closest unvisited vertex
        sptSet[u] = 1;                     // Mark the vertex as visited

        // Update distance values of adjacent vertices
        for (int v = 0; v < V; v++) {
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX 
                && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    // Print the result
    printf("Vertex\tDistance from Source\n");
    for (int i = 0; i < V; i++) {
        printf("%d\t\t%d\n", i, dist[i]);
    }
}

// Main function with example graph
int main() {
    int graph[V][V] = 
    {
        {0, 4, 0, 0, 0, 0, 0, 8, 0},
        {4, 0, 8, 0, 0, 0, 0, 0, 0},
        {0, 8, 0, 7, 0, 4, 0, 0, 0},
        {0, 0, 7, 0, 9, 14, 0, 0, 0},
        {0, 0, 0, 9, 0, 10, 0, 0, 0},
        {0, 0, 4, 14, 10, 0, 2, 0, 0},
        {0, 0, 0, 0, 0, 2, 0, 1, 6},
        {8, 0, 0, 0, 0, 0, 1, 0, 6},
        {0, 0, 0, 0, 0, 0, 6, 7, 0}
    };
    

    Dijkstra(graph, 0);  // Compute shortest paths starting from vertex 0
    return 0;
}
